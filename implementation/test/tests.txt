--------------------------------------------------------------------------------
-- Fully applied calls to first-order functions
--------------------------------------------------------------------------------
--
-- Simple call to a local first-order function.
-- Program should stay unchanged.
let f = \x:int. x+x
in f 1 + f 2

-- We can equivalently use parameters in let rather than lambda.
let f (x:int) = x+x
in f 1 + f 2

-- It works the same with multiple arguments and mixed let parameters
-- and lambdas.
let f (x:int) (b:bool) (y:int) = \z:int. if b then x+y+z else 42
in f 1 true 2 3


--------------------------------------------------------------------------------
-- Simple functional arguments
--------------------------------------------------------------------------------
--
-- First-order function parameter with bound function as argument.
let add1 (x:int) = x+1
in let f (g : int->int) = g 42
   in f add1

-- First-order function parameter with lambda as argument.
let f = \g:int->int. g 42
in f (\x:int. x+x)

-- Another simple example with a functional argument.
let add1 = \y:int. y+1
in let twice = \g:int->int. \x:int. g (g x)
   in twice add1 5

-- Function composition.
let add1 (y:int)   = y + 1 in
let double (z:int) = z + z in
let compose (f:int->int) (g:int->int) (x:int) = f (g x)
in compose add1 double 7


--------------------------------------------------------------------------------
-- Dynamic functions and partial application
--------------------------------------------------------------------------------
--
-- Two calls to a local function of which the outermost abstraction can be
-- preserved, so the (partial) calls "f 1" and "f 3" are preserved and returns a
-- record. It would be better if only one lifted function was created.
let f = \x:int. let a = 1
                in \y:int. x+y+a
in f 1 2 + f 3 4


-- Local function defined inside a local function.
let f = let g = (let a = 1
                 in \x:int. x+a)
        in \y:int. g 2 + y
in f 3


-- Renaming and applying a local first-order function. Since we cannot bind a
-- function to another variable, we expect that a new top-level function is
-- created, with an empty environment record parameter.
let f = \x:int. x+x
in let g = f
   in g 5


-- A similar example with multiple arguments.
let f = \x:int. \y:int. \z:int. x+y+z
in let g = f
   in g 1 2 3


-- Partial application of first-order let-bound function.  We expect to see two
-- new lifted functions: one which takes two arguments "x" and "y" and captures
-- them in a record, and another which takes a record of "x" and "y" and a third
-- argument "z" and computes the lambda body.
let f = \x:int. \y:int. \z:int. x+y+z
in let g = f 1 2 in g 3


-- Partial application of a local first-order function inside a record.
let f = \x:int. \y:int. x+y
in let r = { a = 42, b = f 1, c = \z:int. z+z }
   in (#c r) 2 + (#b r) 3


-- Nested application (was broken in the original depth counting approach).
(#g { g = let f = \x:int. \y:int. x+y in f 1 }) 2


-- Partially applied dynamic function with many arguments.
let f (a:int) (b:int) (c:int) (d:int) = a+b+c+d
in let g = f 1 2
   in g 3 4


--------------------------------------------------------------------------------
-- Closures inside closures
--------------------------------------------------------------------------------
--
-- A local function with a free variable that itself is a function that closes
-- over its own local variables, i.e., a closure inside a closure environment.
let f = let b = 2 in
        let g = let a = 1 in
                let h = \x:int. x+a
                in \z:int. h b + z
        in \y:int. g y + b
in f 42


-- Another example of function referring to another local function with its own
-- free variables.
let f = let a = 1 in
        let g = let b = 2
                in \x:int. x+b
        in \y:int. g y + a
in f 42


-- A local function inside a local function inside a local function.
let f = let a = 1 in
        let g = let b = 2 in
                let h = let c = 3
                        in \x:int. x+a+b+c
                in \y:int. h (h y)
        in \z:int. g z
in f 5


-- More in the same style.
let f = let g = let h = let a = 1 in
                        let b = 2 in
                        let c = 3 in \x:int. x+a+b+c
                in \y:int. h (h y)
        in \z:int. g z
in f 5


-- More complicated nesting of local functions.
let f = let a = 2 in
        let g = \x:int. x + a in
        let h = let b = 1 in
                let k = \y:int. (g y) + b + a
                in \z:int. k a + z
        in \n:int. h n + a
in f 42


--------------------------------------------------------------------------------
-- Pairs and records
--------------------------------------------------------------------------------
--
-- A pair containing a function and a projection followed by an application.
let t = let y = 1
        in (\z:int. y+z, 10)
in (fst t) 5


-- A record containing a lambda and a reference to a local first-order function.
-- Selection of functions from the record and application.
let f = \x:int. \y:int. x+y in
let r = { a = 42, b = f, c = \z:int. z+z }
in (#c r) 2 + (#b r) 3 4 + (#a r)


-- A record containing functions with local variables.
let r = let a = 1 in
        let b = 2 in { f = \x:int. x+a, g = \y:int. y+a+b }
in (#f r) 1 + (#g r) 2


--------------------------------------------------------------------------------
-- More complicated higher-order functional arguments
--------------------------------------------------------------------------------
--
-- id id id
let id1 = \x:int. x
in let id2 = \y:int->int. y
   in let id3 = \z:(int->int)->(int->int). z
      in id3 id2 id1 7

-- "id id id" eta expanded
let id1 = \a:int. a
in let id2 = \b:int->int. \c:int. b c
   in let id3 = \d:(int->int)->(int->int). \e:int->int. \f:int. d e f
      in id3 id2 id1 7


let add1 (z:int) = z+1
in let f = \x:int. \g:int->int. \h:(int->int)->(int->int).
             let a = 1
             in h g (g x) + g a
   in f 5 add1 (\k:int->int. \n:int. k (k n))


-- Simple partially dynamic function with a functional argument.
let f = \x:int. \g:int->int. g (g x)
in f 5 (\y:int. y+1)


-- Same but using parameters in let instead of lambda's.
let f (x:int) (g:int->int) = g (g x)
in f 5 (\y:int. y+1)


-- Partially dynamic function with higher-order argument.
let f (x:int) (g:(int->int)->int) = g (\y:int.y+y) + x
in let h (k:int->int) = k 7
   in f 42 h
